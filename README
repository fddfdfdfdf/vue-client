//webpack 介绍
https://www.webpackjs.com/
https://webpack.js.org/configuration/
//vue 介绍
https://cn.vuejs.org/
//webpack-dashboard
webpack 命令视图
//vue - router
https://router.vuejs.org/zh/guide/#html
//vue
https://cn.vuejs.org/v2/api/#Vue-set
//vuex
https://vuex.vuejs.org/zh/api/#vuex-store
https://vuex.vuejs.org/zh/guide/state.html


if (module.hot) {
    module.hot.accept('./router/index', function() {
        component.$nextTick(()=>{
            console.log("compontensUpdate")
            component.$forceUpdate()
        })
    })
}

//vue 中提取css的方法
可提取单个 CSS 的插件有两个，分别为 extract-text-webpack-plugin 和 mini-css-extract-plugin, 前者再配置一个 minimize 即可实现压缩功能，后者配置另一个插件 optimize-css-assets-webpack-plugin  即可实现压缩功能。
//ui组件库
http://www.cnblogs.com/opendigg/p/6513510.html


1、基本用法：
vue2.0提供了一个keep-alive组件用来缓存组件,避免多次加载相应的组件,减少性能消耗
<keep-alive>
<component>
  <!-- 组件将被缓存 -->
</component>
</keep-alive>

有时候 可能需要缓存整个站点的所有页面,而页面一般一进去都要触发请求的
在使用keep-alive的情况下

<keep-alive>
    <router-view></router-view>
</keep-alive>

2.缓存部分页面或者组件

(1)使用router.mate属性

/*这是目前用的比较多的方式*/

<keep-alive>
    <router-view v-if="!$route.meta.notKeepAlive"></router-view>
</keep-alive>
<router-view v-if="$route.meta.notKeepAlive"></router-view>

router设置:

...
  routes: [
    { path: '/', redirect: '/index',  component: Index, mate: { keepAlive: true }},
    {
      path: '/common',
      component: TestParent,
      children: [
        { path: '/test2', component: Test2, mate: { keepAlive: true } }
      ]
    }
    ....
    //表示index和test2都使用keep-alive

(2).使用新增属性inlcude/exclude

2.1.0后提供了include/exclude两个属性 可以针对性缓存相应的组件

<!-- comma-delimited string -->
<keep-alive include="a,b">
  <component :is="view"></component>
</keep-alive>
<!-- regex (use v-bind) -->
<keep-alive :include="/a|b/">
  <component :is="view"></component>
</keep-alive>
<keep-alive :include="includedComponents">
  <router-view></router-view>
</keep-alive>
includedComponents设置为变量，动态改变即可
//Vue2.0 事件发射与接收(深层信息传递)
https://blog.csdn.net/a5534789/article/details/53415201
//vue 常用UI库
https://blog.csdn.net/yelin042/article/details/79965600
//element-ui
http://element-cn.eleme.io/#/zh-CN/component/installation


使用vue2.0+mintUI+axios+vue-router:https://github.com/Stevenzwzhai/vue-mobile-application

使用vue2.0+elementUI+axios+vue-router:https://github.com/Stevenzwzhai/vue2.0-elementUI-axios-vueRouter


//文本溢出
overflow:hidden;
text-overflow:ellipsis;
white-space:nowrap;


//多行

display:-webkit-box;
-webkit-box-orient:vertical;
-webkit-line-clamp:3;
overflow:hidden;




element-ui balbelrc
{
	"compact": false,
	"presets":[
		"es2015",
		"es2017",
		"stage-1"
	],
	"plugins":[
		[
			"component",
			{
				"libraryName": "element-ui",
				"styleLibraryName": "theme-chalk"
			}
		],
		"transform-regenerator",
		"transform-runtime"
	]
}

//过度动画效果
http://www.dowebok.com/demo/134/index2.html
//scrollReveal.js演示2

http://www.dowebok.com/134.html

//css 动画
有的页面在向下滚动的时候，有些元素会产生细小的动画效果。虽然动画比较小，但却能吸引你的注意。比如刚刚发布的 iPhone 6 的页面（查看）。如果你希望你的页面也更加有趣，那么你可以试试 WOW.js。
WOW.js 依赖 animate.css，所以它支持 animate.css 多达 60 多种的动画效果，能满足您的各种需求。
animation.css

//aos.js超赞页面滚动元素动画jQuery动画库
http://www.jq22.com/demo/jQueryAos.js20160626/



//node 的多进程、多线程 cluster

var debug = require(‘debug’)(‘my-application’);
var app = require(’…/app’);
var cluster = require(‘cluster’)
var numCPUs = require(‘os’).cpus().length;

if(cluster.isMaster){
	console.log("宿主启动...");

	for (var i = 0; i < numCPUs; i++) {
		cluster.fork();
	}
	cluster.on('listening',function(worker,address){
		console.log('核心'+i+' pid:'+ worker.process.pid);
	});
	cluster.on('exit', function(worker, code, signal) {
		console.log('核心'+i+' pid:'+ worker.process.pid+' 重启')
		setTimeout(function() {cluster.fork();},2000);
	});
}else{
	app.set('port',88);
	var server = app.listen(app.get('port'),function() {
	});
}

// 服务器监听文件自动重启

   Supervisor  nodemon 、hotnode、forever、pm2

//https://www.jianshu.com/p/e709b71f12da


//vue中的style样式开发
Vue中scoped css和css module比较 scoped css 官方文档 scoped css
https://www.cnblogs.com/macq/archive/2018/05/17/9051097.html


只需要在*.vue文件中配置 style


scoped css

官方文档

scoped css可以直接在能跑起来的vue项目中使用。

使用方法：

<style scoped>
h1 {
  color: #f00;
}
</style>

使用scoped划分本地样式的结果编译结果如下：

h1[data-v-4c3b6c1c] {
    color: #f00;
}

即在元素中添加了一个唯一属性用来区分。
缺点

一、如果用户在别处定义了相同的类名，也许还是会影响到组件的样式。

二、根据css样式优先级的特性，scoped这种处理会造成每个样式的权重加重了：

即理论上我们要去修改这个样式，需要更高的权重去覆盖这个样式。

所以在引用包含scoped的第三方插件时如若需要修改样式则需要全局修改，而且要注意权重问题，0.0迫不得已再使用!important。

三、如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性：

所以一般父组件如果加了scoped，会比已经设置过自己样式的子组件内除最外层标签的内层标签的权重低，影响不到他们的样式。

不过也是可以通过如下方法影响到的：

四、scoped会使标签选择器渲染变慢很多倍

官方给了一些注意事项如下：

我们可以看到用标签选择器时scoped会严重降低性能，而使用class或id则不会。
css module

官方文档

css module需要增加css-loader配置才能生效，具体可看文档的实现。

注意

如果你使用的是style-loader，如果想让配置生效需要更换到文档所述的vue-style-loader（是vue-loader的一个依赖，无需单独安装）。

二者区别可以从这里了找vue-style-loader

使用如下：

<template>
  <p :class="$style.gray"> //$style 只想实例对象 this.$style
    Im gray
  </p>
</template>

<style module>
.gray {
  color: gray;
}
</style>

使用module的结果编译如下：

<p class="gray_3FI3s6uz">Im gray</p>

.gray_3FI3s6uz {
    color: gray;
}

由此可见，css module直接替换了类名，排除了用户设置类名影响组件样式的可能性。

这样$style.red就可以当做一个变量，并且可以在js中使用，如下：

<script>
export default {
  created () {
    console.log(this.$style.gray)
    // -> "gray_3FI3s6uz"
    // 一个基于文件名和类名生成的标识符
  }
}
</script>

我们可以看到，module在使用时多出了绑定和$style，如果你想更优雅，可以看一下这个vue-css-modules。
css module父子组件问题

在使用scss并开启css module时发现一个问题

使用module的父组件会在没有使用module的子组件的所有根类上增加hash改变其类名，可能会造成子组件样式应用不上。

如下是没有开启css module子组件的样式：

<style lang="scss">
  .comp{
    color: palegoldenrod;
    p{
      color: black;
    }
  }
  .t {
    color: teal;
  }
  div {
    color: yellow;
  }
</style>

父组件开启css module后编译结果如下：

.comp_2tR6GNan {
  color: palegoldenrod;
}
.comp_2tR6GNan p {
  color: black;
}
.t_39GmF73s {
  color: teal;
}
div {
  color: yellow;
}

可以看到comp和t类都被修改了类名，如果根样式是标签选择器不会受影响。

所以在使用css module的父组件中使用的子组件也要开启css module。
使用css module在keyframes中的问题

使用CSS modules处理动画animation的关键帧keyframes，动画名称必须先写。

animation: ani 1s;能正常编译，而animation: 1s ani;则会编译的不符合预期，所以平时养成良好的css参数书写顺序也很重要。







